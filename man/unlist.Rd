% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/unlist.R
\name{unlist}
\alias{unlist}
\title{Flatten lists extended to any class}
\usage{
unlist(x, recursive = TRUE, use.names = TRUE)
}
\arguments{
\item{x}{Any list R object.}

\item{recursive}{Logical. Should unlisting be applied to list components of
x?}

\item{use.names}{Logical. Should names be preserved?}
}
\description{
Given a list 'x' of R objects from the same class and same
format, unlist simplifies it to produce a new R object which contains all
the initial components which in 'x' object.
}
\details{
This is a method to extend unlist generic function to handle
any list of objects from the same class.
}
\examples{
gr1 <-GRanges(seqnames = 'chr2', ranges = IRanges(3, 6), strand = '+',
score = 5L, GC = 0.45)

gr2 <- GRanges(seqnames = c('chr1', 'chr1'), ranges = IRanges(c(7,13),
width = 3), strand = c('+', '-'), score = 3:4, GC = c(0.3, 0.5))

gr3 <- GRanges(seqnames = c('chr1', 'chr2'),
ranges = IRanges(c(1, 4), c(3, 9)), strand = c('-', '-'),
score = c(6L, 2L), GC = c(0.4, 0.1))

grl <- list('gr1' = gr1, 'gr2' = gr2, 'gr3' = gr3)
base::unlist(grl) # The default unlist does not work
unlist(grl)
}
\keyword{internal}
