% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict.R
\name{predict}
\alias{predict}
\alias{predict,RandomForest,GRanges-method}
\alias{predict,RandomForest,pDMP-method}
\alias{predict,randomForestformula,GRanges-method}
\alias{predict,randomForestformulaList,GRangesList-method}
\title{Prediction Method of Random Forest for 'pDMP' Objects}
\usage{
predict(object, newdata = NULL, ...)

\S4method{predict}{RandomForest,GRanges}(
  object,
  newdata,
  type = c("class", "response", "prob", "votes"),
  predict.all = FALSE,
  keep.data = FALSE,
  ...
)

\S4method{predict}{RandomForest,pDMP}(
  object,
  newdata,
  type = c("class", "response", "prob", "votes"),
  predict.all = FALSE,
  keep.data = FALSE,
  num.cores = 1L,
  tasks = 0L,
  ...
)

\S4method{predict}{randomForestformula,GRanges}(
  object,
  newdata,
  type = c("class", "response", "prob", "votes"),
  predict.all = FALSE,
  keep.data = FALSE,
  ...
)

\S4method{predict}{randomForestformulaList,GRangesList}(
  object,
  newdata,
  type = c("class", "response", "prob", "votes"),
  predict.all = FALSE,
  keep.data = FALSE,
  num.cores = 1L,
  tasks = 0L,
  ...
)
}
\arguments{
\item{object}{an object of 'RandomForest-class', as that created by the
function \code{\link{evaluateDIMPclass}}. If \eqn{newdata} is a
\code{\link[GenomicRanges]{GRanges-class}}, then 'newdata' must be an
element of a pDMP-class object, i.e., it must have the same structure as
the GRanges-class elements in a pDMP-class object.}

\item{newdata}{A 'pDMP' object generated with function
\code{\link{selectDIMP}}.}

\item{predict.all, type, ...}{The same as in
\code{\link[randomForest]{predict.randomForest}}.}

\item{keep.data}{Logical. Whether to preserve the original class
from object \eqn{'newdata'}. If TRUE, then the predicted class and
the posterior probability of the treatment class are added as a
metacolumns of \eqn{'newdata'}.}

\item{num.cores, tasks}{Parameters for parallel computation using package
\code{\link[BiocParallel]{BiocParallel-package}}: the number of cores to
use, i.e. at most how many child processes will be run simultaneously (see
\code{\link[BiocParallel]{bplapply}} and the number of tasks per job (only
for Linux OS).}
}
\value{
The same results as given by function
\code{\link[randomForest]{predict.randomForest}}.
}
\description{
This function applies
\code{\link[randomForest]{predict.randomForest}} to a 'pDMP' object
provided in the argument \eqn{newdata}.
}
\details{
The generic function just call function
\code{\link[stats]{predict}} from 'stats' R package.

If \eqn{newdata} is a \code{\link[GenomicRanges]{GRanges-class}}, then
'newdata' must be an element of a pDMP-class object, i.e., it must have
the same structure as the GRanges-class elements in a pDMP-class object.
}
\examples{
## Load a DMP data set
data(dmps, package = 'MethylIT')

## Let's accomplish the classification by using Random Forest
## algorithm
perf <- evaluateDIMPclass(LR = dmps,
                          column = c(hdiv = TRUE, TV = TRUE,
                                     wprob = TRUE, pos = TRUE),
                          classifier = 'random_forest',
                          n.pc = 4L,
                          control.names =  c('C1', 'C2', 'C3'),
                          treatment.names = c('T1', 'T2', 'T3'),
                          center = FALSE,
                          scale = FALSE,
                          prop = 0.6)

predict(object = perf$model, newdata = dmps, keep.data = TRUE)
}
\author{
Robersy Sanchez \url{https://genomaths.com}
}
